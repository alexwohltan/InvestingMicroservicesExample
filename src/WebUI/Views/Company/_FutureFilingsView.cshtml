@model IList<DataStructures.FundamentalData.Filing>

@{
    DataStructures.FundamentalData.Filing MostRecentFiling = Model.OrderByDescending(e => e.FilingDate).First();
    DataStructures.FundamentalData.Filing? Filing2 = Model.Count() >= 2 ? Model.OrderByDescending(e => e.FilingDate).ToList()[1] : null;
    DataStructures.FundamentalData.Filing? Filing3 = Model.Count() >= 3 ? Model.OrderByDescending(e => e.FilingDate).ToList()[2] : null;
    DataStructures.FundamentalData.Filing? Filing4 = Model.Count() >= 4 ? Model.OrderByDescending(e => e.FilingDate).ToList()[3] : null;
}

<div id="FutureFilingsView">
    <h4 class="display-7">2. Future Cashflows</h4>
    <p>We will now project the future cashflows of the company. For this, we will project the next 10 years. After 10 years we will use a calculated number (terminal value).</p>
    <p>A linear growth of each of our values is already calculated. When you change a value, the following values will adjust (growing with the calculated growth rate).</p>
    <br />
    <p>Free Cashflow is calculated with the following formula:</p>
    <p><b>Net Sales / Revenue</b></p>
    <p>- Cost of Goods Sold / Cost of Revenue</p>
    <p>- Selling, General and Administrative Costs, Research & Development / Operating Expenses</p>
    <p><b>= Operating Profit</b></p>
    <p>- Taxes</p>
    <p>+ Depreciation / - Appreciation</p>
    <p><b>= Operating Cashflow</b></p>
    <p>- Additions to Net Working Capital / Investments in short term assets</p>
    <p>- Capital Expenditures / Investments</p>
    <p><b>= Free Cashflow</b></p>
    <br />


    <table class="table small table-hover">
        <tr>
            <th></th>
            @if (Filing4 != null)
            {
                <th>@Filing4.FilingDate.Year</th>
            }
            @if (Filing3 != null)
            {
                <th>@Filing3.FilingDate.Year</th>
            }
            @if (Filing2 != null)
            {
                <th>@Filing2.FilingDate.Year</th>
            }
            <th>@MostRecentFiling.FilingDate.Year</th>
            <th>@(MostRecentFiling.FilingDate.Year + 1)</th>
            <th>@(MostRecentFiling.FilingDate.Year + 2)</th>
            <th>@(MostRecentFiling.FilingDate.Year + 3)</th>
            <th>@(MostRecentFiling.FilingDate.Year + 4)</th>
            <th>@(MostRecentFiling.FilingDate.Year + 5)</th>
            <th>@(MostRecentFiling.FilingDate.Year + 6)</th>
            <th>@(MostRecentFiling.FilingDate.Year + 7)</th>
            <th>@(MostRecentFiling.FilingDate.Year + 8)</th>
            <th>@(MostRecentFiling.FilingDate.Year + 9)</th>
            <th>@(MostRecentFiling.FilingDate.Year + 10)</th>
        </tr>
        <tr>
            <td>Revenue</td>
            @if (Filing4 != null)
            {
                <td>@((Filing4.IncomeStatement.Revenue / 1000000).ToString("#,##0"))</td>
            }
            @if (Filing3 != null)
            {
                <td>@((Filing3.IncomeStatement.Revenue / 1000000).ToString("#,##0"))</td>
            }
            @if (Filing2 != null)
            {
                <td>@((Filing2.IncomeStatement.Revenue / 1000000).ToString("#,##0"))</td>
            }
            <td>@((MostRecentFiling.IncomeStatement.Revenue / 1000000).ToString("#,##0"))</td>
            <td><input id="revenueInput1" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="revenueInput2" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="revenueInput3" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="revenueInput4" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="revenueInput5" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="revenueInput6" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="revenueInput7" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="revenueInput8" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="revenueInput9" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="revenueInput10" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
        </tr>
        <tr>
            <td>Cost of Revenue</td>
            @if (Filing4 != null)
            {
                <td>@((Filing4.IncomeStatement.CostofRevenue / 1000000).ToString("#,##0"))</td>
            }
            @if (Filing3 != null)
            {
                <td>@((Filing3.IncomeStatement.CostofRevenue / 1000000).ToString("#,##0"))</td>
            }
            @if (Filing2 != null)
            {
                <td>@((Filing2.IncomeStatement.CostofRevenue / 1000000).ToString("#,##0"))</td>
            }
            <td>@((MostRecentFiling.IncomeStatement.CostofRevenue / 1000000).ToString("#,##0"))</td>
            <td><input id="costOfrevenueInput1" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="costOfrevenueInput2" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="costOfrevenueInput3" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="costOfrevenueInput4" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="costOfrevenueInput5" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="costOfrevenueInput6" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="costOfrevenueInput7" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="costOfrevenueInput8" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="costOfrevenueInput9" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="costOfrevenueInput10" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
        </tr>
        <tr>
            <td>Operating Expenses</td>
            @if (Filing4 != null)
            {
                <td>@((Filing4.IncomeStatement.OperatingExpenses / 1000000).ToString("#,##0"))</td>
            }
            @if (Filing3 != null)
            {
                <td>@((Filing3.IncomeStatement.OperatingExpenses / 1000000).ToString("#,##0"))</td>
            }
            @if (Filing2 != null)
            {
                <td>@((Filing2.IncomeStatement.OperatingExpenses / 1000000).ToString("#,##0"))</td>
            }
            <td>@((MostRecentFiling.IncomeStatement.OperatingExpenses / 1000000).ToString("#,##0"))</td>
            <td><input id="operatingExpensesInput1" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingExpensesInput2" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingExpensesInput3" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingExpensesInput4" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingExpensesInput5" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingExpensesInput6" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingExpensesInput7" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingExpensesInput8" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingExpensesInput9" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingExpensesInput10" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
        </tr>
        <tr>
            <td>Operating Income</td>
            @if (Filing4 != null)
            {
                <td>@((Filing4.IncomeStatement.OperatingIncomeLoss / 1000000).ToString("#,##0"))</td>
            }
            @if (Filing3 != null)
            {
                <td>@((Filing3.IncomeStatement.OperatingIncomeLoss / 1000000).ToString("#,##0"))</td>
            }
            @if (Filing2 != null)
            {
                <td>@((Filing2.IncomeStatement.OperatingIncomeLoss / 1000000).ToString("#,##0"))</td>
            }
            <td>@((MostRecentFiling.IncomeStatement.OperatingIncomeLoss / 1000000).ToString("#,##0"))</td>
            <td><input id="operatingIncomeInput1" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingIncomeInput2" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingIncomeInput3" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingIncomeInput4" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingIncomeInput5" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingIncomeInput6" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingIncomeInput7" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingIncomeInput8" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingIncomeInput9" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingIncomeInput10" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
        </tr>
        <tr>
            <td>Net Income</td>
            @if (Filing4 != null)
            {
                <td>@((Filing4.IncomeStatement.NetIncome / 1000000).ToString("#,##0"))</td>
            }
            @if (Filing3 != null)
            {
                <td>@((Filing3.IncomeStatement.NetIncome / 1000000).ToString("#,##0"))</td>
            }
            @if (Filing2 != null)
            {
                <td>@((Filing2.IncomeStatement.NetIncome / 1000000).ToString("#,##0"))</td>
            }
            <td>@((MostRecentFiling.IncomeStatement.NetIncome / 1000000).ToString("#,##0"))</td>
            <td><input id="netIncomeInput1" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="netIncomeInput2" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="netIncomeInput3" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="netIncomeInput4" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="netIncomeInput5" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="netIncomeInput6" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="netIncomeInput7" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="netIncomeInput8" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="netIncomeInput9" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="netIncomeInput10" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
        </tr>
        <tr>
            <td>Operating Cashflow</td>
            @if (Filing4 != null)
            {
                <td>@((Filing4.CashflowStatement.NetCashfromOperatingActivities / 1000000).ToString("#,##0"))</td>
            }
            @if (Filing3 != null)
            {
                <td>@((Filing3.CashflowStatement.NetCashfromOperatingActivities / 1000000).ToString("#,##0"))</td>
            }
            @if (Filing2 != null)
            {
                <td>@((Filing2.CashflowStatement.NetCashfromOperatingActivities / 1000000).ToString("#,##0"))</td>
            }
            <td>@((MostRecentFiling.CashflowStatement.NetCashfromOperatingActivities / 1000000).ToString("#,##0"))</td>
            <td><input id="operatingCashflowInput1" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingCashflowInput2" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingCashflowInput3" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingCashflowInput4" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingCashflowInput5" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingCashflowInput6" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingCashflowInput7" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingCashflowInput8" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingCashflowInput9" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="operatingCashflowInput10" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
        </tr>
        <tr>
            <td>Free Cashflow</td>
            @if (Filing4 != null)
            {
                <td>@((Filing4.CashflowStatement.FreeCashFlow / 1000000).ToString("#,##0"))</td>
            }
            @if (Filing3 != null)
            {
                <td>@((Filing3.CashflowStatement.FreeCashFlow / 1000000).ToString("#,##0"))</td>
            }
            @if (Filing2 != null)
            {
                <td>@((Filing2.CashflowStatement.FreeCashFlow / 1000000).ToString("#,##0"))</td>
            }
            <td>@((MostRecentFiling.CashflowStatement.FreeCashFlow / 1000000).ToString("#,##0"))</td>
            <td><input id="freeCashflowInput1" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="freeCashflowInput2" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="freeCashflowInput3" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="freeCashflowInput4" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="freeCashflowInput5" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="freeCashflowInput6" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="freeCashflowInput7" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="freeCashflowInput8" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="freeCashflowInput9" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
            <td><input id="freeCashflowInput10" style="width: 100%" onchange="filingCalculationChanged(this)" type="number" step="10" /></td>
        </tr>
    </table>
    <p>Numbers in Millions.</p>



</div>

<script>

    let historicalRevenueGrowthRate = calculateAverageRevenueGrowthRateFromHistoricalData();
    let historicalCostOfRevenuePercentage = calculateAverageCostOfRevenuePercentageFromHistoricalData();
    let historicalOperatingExpensesPercentage = calculateAverageOperatingExpensesPercentageFromHistoricalData();
    // Operating Income = Revenue - CostOfRevenue - OperatingExpenses
    let historicalNetIncomeToOperatingIncomePercentage = calculateAverageNetIncomeToOperatingIncomePercentageFromHistoricalData();
    let historicalOperatingCFNetIncomePercentage = calculateAverageOperatingCFNetIncomePercentageFromHistoricalData();
    let historicalFCFOperatingCashflowPercentage = calculateAverageFCFOperatingCFPercentageFromHistoricalData();

    firstCalculationOnStart();

    // calculates the average annual growth rate of the revenue
    function calculateAverageRevenueGrowthRateFromHistoricalData() {
        var revenues = [@string.Join(",", Model.OrderBy(e => e.FilingDate).Select(e => e.IncomeStatement.Revenue))];

        var sumOfGrowthRates = 0;

        for (let i = 1; i < revenues.length; i++) {
            sumOfGrowthRates += (revenues[i] - revenues[i - 1]) / revenues[i - 1];
        }

        return sumOfGrowthRates / (revenues.length - 1);
    }
    // calculates the average percentage of cost of revenue / revenue
    function calculateAverageCostOfRevenuePercentageFromHistoricalData() {
        var costOfRevenueRatios = [@string.Join(",", Model.Select(e => e.IncomeStatement.CostofRevenue / e.IncomeStatement.Revenue))];
        return calculateAverageOfSeries(costOfRevenueRatios);
    }
    // calculates the average percentage of operating expenses / revenue
    function calculateAverageOperatingExpensesPercentageFromHistoricalData() {
        var operationExpenseRatios = [@string.Join(",", Model.Select(e => e.IncomeStatement.OperatingExpenses / e.IncomeStatement.Revenue))];
        return calculateAverageOfSeries(operationExpenseRatios);
    }
    // calculates the average percentage of Net Income / Operating Income
    function calculateAverageNetIncomeToOperatingIncomePercentageFromHistoricalData() {
        var netIncomeOperatingIncomeRatios = [@string.Join(",", Model.Select(e => e.IncomeStatement.NetIncome / e.IncomeStatement.OperatingIncomeLoss))];
        return calculateAverageOfSeries(netIncomeOperatingIncomeRatios);
    }
    // calculates the average percentage of Operating Cashflow / NetIncome
    function calculateAverageOperatingCFNetIncomePercentageFromHistoricalData() {
        var operatingCFNetIncomeRatios = [@string.Join(",", Model.Select(e => e.CashflowStatement.NetCashfromOperatingActivities / e.IncomeStatement.NetIncome))];
        return calculateAverageOfSeries(operatingCFNetIncomeRatios);
    }
    // calculates the average percentage of Free Cashflow / Operating Cashflow
    function calculateAverageFCFOperatingCFPercentageFromHistoricalData() {
        var FCFOperatingCFRatios = [@string.Join(",", Model.Select(e => e.CashflowStatement.FreeCashFlow / e.CashflowStatement.NetCashfromOperatingActivities))];
        return calculateAverageOfSeries(FCFOperatingCFRatios);
    }

    function firstCalculationOnStart() {
        let firstField = document.getElementById("revenue" + "Input" + 1);
        firstField.value = @MostRecentFiling.IncomeStatement.Revenue * parseFloat(1 + historicalRevenueGrowthRate) / 1000000;

        calculateRemainingFields(firstField.id, 1);
    }

    function filingCalculationChanged(sender) {
        var senderColumn = sender.id.slice(-1);
        if (senderColumn === "0") senderColumn = "10";

        calculateRemainingFields(sender.id, senderColumn);

        recalculateDCF();
    }

    // calculates the value for every field that is right or below
    // parameters:
    // name of the field that needs to be updated e.g.netIncomeInput4
    // number of the column that started the change (triggered the on-change event)
    function calculateRemainingFields(nameOfField, columnOfChange) {
        let columnOfField = nameOfField.slice(-1);
        if (columnOfField === "0") columnOfField = "10";
        let categoryOfField = nameOfField.replace(columnOfField, "");

        let thisField = document.getElementById(nameOfField);

        let nameOfNextField = "";

        switch (categoryOfField) {
            case "revenue" + "Input":
                if (columnOfField != "10") {
                    nameOfNextField = (categoryOfField + (parseInt(columnOfField) + 1));

                    let nextField = document.getElementById(nameOfNextField);
                    nextField.value = Math.round(thisField.value * (1 + historicalRevenueGrowthRate));
                }
                else {
                    nameOfNextField = "costOfrevenue" + "Input" + columnOfChange;

                    let nextField = document.getElementById(nameOfNextField);
                    nextField.value = Math.round(document.getElementById("revenue" + "Input" + columnOfChange).value * historicalCostOfRevenuePercentage);
                }
                calculateRemainingFields(nameOfNextField, columnOfChange);
                break;
            case "costOfrevenue" + "Input":
                if (columnOfField != "10") {
                    nameOfNextField = (categoryOfField + (parseInt(columnOfField) + 1));

                    let nextField = document.getElementById(nameOfNextField);
                    nextField.value = Math.round(document.getElementById("revenue" + "Input" + (parseInt(columnOfField) + 1)).value * historicalCostOfRevenuePercentage);
                }
                else {
                    nameOfNextField = "operatingExpenses" + "Input" + columnOfChange;

                    let nextField = document.getElementById(nameOfNextField);
                    nextField.value = Math.round(document.getElementById("revenue" + "Input" + columnOfChange).value * historicalOperatingExpensesPercentage);
                }
                calculateRemainingFields(nameOfNextField, columnOfChange);
                break;
            case "operatingExpenses" + "Input":
                if (columnOfField != "10") {
                    nameOfNextField = (categoryOfField + (parseInt(columnOfField) + 1));

                    let nextField = document.getElementById(nameOfNextField);
                    nextField.value = Math.round(document.getElementById("revenue" + "Input" + (parseInt(columnOfField) + 1)).value * historicalOperatingExpensesPercentage);
                }
                else {
                    nameOfNextField = "operatingIncome" + "Input" + columnOfChange;

                    let nextField = document.getElementById(nameOfNextField);
                    nextField.value = Math.round(parseFloat(document.getElementById("revenue" + "Input" + columnOfChange).value) + parseFloat(document.getElementById("costOfrevenue" + "Input" + columnOfChange).value) + parseFloat(document.getElementById("operatingExpenses" + "Input" + columnOfChange).value));
                }
                calculateRemainingFields(nameOfNextField, columnOfChange);
                break;
            case "operatingIncome" + "Input":
                if (columnOfField != "10") {
                    nameOfNextField = (categoryOfField + (parseInt(columnOfField) + 1));

                    let nextField = document.getElementById(nameOfNextField);
                    nextField.value = Math.round(parseFloat(document.getElementById("revenue" + "Input" + (parseInt(columnOfField) + 1)).value) + parseFloat(document.getElementById("costOfrevenue" + "Input" + (parseInt(columnOfField) + 1)).value) + parseFloat(document.getElementById("operatingExpenses" + "Input" + (parseInt(columnOfField) + 1)).value));
                }
                else {
                    nameOfNextField = "netIncome" + "Input" + columnOfChange;

                    let nextField = document.getElementById(nameOfNextField);
                    nextField.value = Math.round(document.getElementById("operatingIncome" + "Input" + columnOfChange).value * historicalNetIncomeToOperatingIncomePercentage);
                }
                calculateRemainingFields(nameOfNextField, columnOfChange);
                break;
            case "netIncome" + "Input":
                if (columnOfField != "10") {
                    nameOfNextField = (categoryOfField + (parseInt(columnOfField) + 1));

                    let nextField = document.getElementById(nameOfNextField);
                    nextField.value = Math.round(document.getElementById("operatingIncome" + "Input" + (parseInt(columnOfField) + 1)).value * historicalNetIncomeToOperatingIncomePercentage);
                }
                else {
                    nameOfNextField = "operatingCashflow" + "Input" + columnOfChange;

                    let nextField = document.getElementById(nameOfNextField);
                    nextField.value = Math.round(document.getElementById("netIncome" + "Input" + columnOfChange).value * historicalOperatingCFNetIncomePercentage);
                }
                calculateRemainingFields(nameOfNextField, columnOfChange);
                break;
            case "operatingCashflow" + "Input":
                if (columnOfField != "10") {
                    nameOfNextField = (categoryOfField + (parseInt(columnOfField) + 1));

                    let nextField = document.getElementById(nameOfNextField);
                    nextField.value = Math.round(document.getElementById("netIncome" + "Input" + (parseInt(columnOfField) + 1)).value * historicalOperatingCFNetIncomePercentage);
                }
                else {
                    nameOfNextField = "freeCashflow" + "Input" + columnOfChange;

                    let nextField = document.getElementById(nameOfNextField);
                    nextField.value = Math.round(document.getElementById("operatingCashflow" + "Input" + columnOfChange).value * historicalFCFOperatingCashflowPercentage);
                }
                calculateRemainingFields(nameOfNextField, columnOfChange);
                break;
            case "freeCashflow" + "Input":
                if (columnOfField != "10") {
                    nameOfNextField = (categoryOfField + (parseInt(columnOfField) + 1));

                    let nextField = document.getElementById(nameOfNextField);
                    nextField.value = Math.round(document.getElementById("operatingCashflow" + "Input" + (parseInt(columnOfField) + 1)).value * historicalFCFOperatingCashflowPercentage);
                    calculateRemainingFields(nameOfNextField, columnOfChange);
                }
                break;
        }
    }

    function calculateAverageOfSeries(series) {
        var sum = 0;
        for (let i = 0; i < series.length; i++) {
            sum += parseFloat(series[i]);
        }
        return sum / series.length;
    }

    @*onStartCalculation();

    function onStartCalculation() {
        revenueCalculation();
        costOfrevenueCalculation();
        operatingExpensesCalculation();
        operatingIncomeCalculation();
        netIncomeCalculation();
        operatingCashflowCalculation();
        freeCashflowCalculation();
    }

    function xArrayFunction() {
        return [@string.Join(",", Model.OrderBy(e => e.FilingDate).Select(e => e.FiscalYear))];
    }
    function revenueArray() {
        return [@string.Join(",", Model.OrderBy(e => e.FilingDate).Select(e => e.IncomeStatement.Revenue))];
    }
    function costOfrevenueArray() {
        return [@string.Join(",", Model.OrderBy(e => e.FilingDate).Select(e => e.IncomeStatement.CostofRevenue))];
    }
    function operatingExpensesArray() {
        return [@string.Join(",", Model.OrderBy(e => e.FilingDate).Select(e => e.IncomeStatement.OperatingExpenses))];
    }
    function operatingIncomeArray() {
        return [@string.Join(",", Model.OrderBy(e => e.FilingDate).Select(e => e.IncomeStatement.OperatingIncomeLoss))];
    }
    function netIncomeArray() {
        return [@string.Join(",", Model.OrderBy(e => e.FilingDate).Select(e => e.IncomeStatement.NetIncome))];
    }
    function operatingCashflowArray() {
        return [@string.Join(",", Model.OrderBy(e => e.FilingDate).Select(e => e.CashflowStatement.NetCashfromOperatingActivities))];
    }
    function freeCashflowArray() {
        return [@string.Join(",", Model.OrderBy(e => e.FilingDate).Select(e => e.CashflowStatement.FreeCashFlow))];
    }

    function revenueCalculation() {
        var propertyName = "revenue";
        futureFilingCalculationOnStart(revenueArray(), propertyName);
    }
    function costOfrevenueCalculation() {
        var propertyName = "costOfrevenue";
        futureFilingCalculationOnStart(costOfrevenueArray(), propertyName);
    }
    function operatingExpensesCalculation() {
        var propertyName = "operatingExpenses";
        futureFilingCalculationOnStart(operatingExpensesArray(), propertyName);
    }
    function operatingIncomeCalculation() {
        var propertyName = "operatingIncome";
        futureFilingCalculationOnStart(operatingIncomeArray(), propertyName);
    }
    function netIncomeCalculation() {
        var propertyName = "netIncome";
        futureFilingCalculationOnStart(netIncomeArray(), propertyName);
    }
    function operatingCashflowCalculation() {
        var propertyName = "operatingCashflow";
        futureFilingCalculationOnStart(operatingCashflowArray(), propertyName);
    }
    function freeCashflowCalculation() {
        var propertyName = "freeCashflow";
        futureFilingCalculationOnStart(freeCashflowArray(), propertyName);
    }


    function futureFilingCalculationOnStart(yArray, propertyName) {
        var xArray = xArrayFunction();

        var currentYear = @MostRecentFiling.FiscalYear;

        for (let i = 0; i < 10; i++) {
            var offset = i + 1;
            var workingYear = currentYear + offset;

            var inputName = propertyName + "Input" + offset;

            var slope = linearRegressionSlope(xArray, yArray);
            var intercept = linearRegressionIntercept(xArray, yArray, slope);
            var calculatedValue = workingYear * slope + intercept;

            document.getElementById(inputName).value = Math.round(calculatedValue / 1000000);
        }
    }*@

    //function filingCalculationChanged(sender) {
    //    var senderColumn = sender.id.slice(-1);
    //    var senderCategory = sender.id.replace(senderColumn, "");

    //    if (senderColumn < 10) {

    //        var slope = 0;

    //        switch (senderCategory) {
    //            case "revenue" + "Input":
    //                slope = linearRegressionSlope(xArrayFunction(), revenueArray());
    //                break;
    //            case "costOfrevenue" + "Input":
    //                slope = linearRegressionSlope(xArrayFunction(), costOfrevenueArray());
    //                break;
    //            case "operatingExpenses" + "Input":
    //                slope = linearRegressionSlope(xArrayFunction(), operatingExpensesArray());
    //                break;
    //            case "operatingIncome" + "Input":
    //                slope = linearRegressionSlope(xArrayFunction(), operatingIncomeArray());
    //                break;
    //            case "netIncome" + "Input":
    //                slope = linearRegressionSlope(xArrayFunction(), netIncomeArray());
    //                break;
    //            case "operatingCashflow" + "Input":
    //                slope = linearRegressionSlope(xArrayFunction(), operatingCashflowArray());
    //                break;
    //            case "freeCashflow" + "Input":
    //                slope = linearRegressionSlope(xArrayFunction(), freeCashflowArray());
    //                break;
    //        }

    //        for (let i = parseInt(senderColumn) + 1; i <= 10; i++) {
    //            document.getElementById(senderCategory + i).value = parseFloat(document.getElementById(senderCategory + parseInt(i - 1)).value) + Math.round(slope / 1000000);
    //        }
    //    }

    //    recalculateDCF();
    //}

    //function linearRegressionSlope(xArray, yArray) {
    //    // Calculate Sums
    //    var xSum = 0, ySum = 0, xxSum = 0, xySum = 0;
    //    var count = xArray.length;
    //    for (var i = 0, len = count; i < count; i++) {
    //        xSum += xArray[i];
    //        ySum += yArray[i];
    //        xxSum += xArray[i] * xArray[i];
    //        xySum += xArray[i] * yArray[i];
    //    }

    //    // Calculate slope
    //    var slope = (count * xySum - xSum * ySum) / (count * xxSum - xSum * xSum);

    //    return slope;
    //}

    //function linearRegressionIntercept(xArray, yArray, slope){
    //    // Calculate Sums
    //    var xSum = 0, ySum = 0, xxSum = 0, xySum = 0;
    //    var count = xArray.length;
    //    for (var i = 0, len = count; i < count; i++) {
    //        xSum += xArray[i];
    //        ySum += yArray[i];
    //        xxSum += xArray[i] * xArray[i];
    //        xySum += xArray[i] * yArray[i];
    //    }

    //    // Calculate intercept
    //    var intercept = (ySum / count) - (slope * xSum) / count;

    //    return intercept;
    //}
</script>